/***
 *  $Id$
 **
 *  File: a1.cpp
 *  Created: Oct 21, 2018
 *
 *  Author: Jaroslaw Zola <jaroslaw.zola@hush.com>
 *  Copyright (c) 2018 Jaroslaw Zola
 */

// DO NOT EDIT THIS FILE
// YOUR CODE MUST BE CONTAINED IN a0.hpp

#include "a1.hpp"

#include <algorithm>
#include <chrono>
#include <cmath>
#include <functional>
#include <iostream>
#include <random>

#include <mpi.h>
#include <fstream>
#include <sstream>

class S
{
public:
    int a;
    float b;
    S(){};
    S(int a, float b): a(a), b(b){};
    ~S(){};
    
};

bool is_prime(S x) {
    if (x.a < 2) return false;
    for (int i = 2; i <= std::sqrt(x.a); ++i) if ((x.a % i) == 0) return false;
    return true;
} // is_prime


int main(int argc, char* argv[]) {
    int size, rank;

    MPI_Init(&argc, &argv);
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);

    if (argc != 2) {
        if (rank == 0) std::cout << "usage: " << "a1 n" << std::endl;
        return MPI_Finalize();
    }

    std::mt19937 rng(13 * rank);
    std::uniform_int_distribution<int> ui(1, 10000000);
    std::vector<S> X;

    long x_size = std::atol(argv[1]);
    X.reserve(x_size);

    for (int i=0; i < x_size; i++){
        X.push_back( S( ui(rng), 0.5) );
    }

    std::vector<S> Y;

    std::ofstream f_actual;
    std::stringstream fn_actual;

    std::ofstream f_mpi;
    std::stringstream fn_mpi;

    fn_actual << rank << "_actual.csv";
    fn_mpi << rank << "_mpi.csv";

    f_actual.open(fn_actual.str());
    
    for (auto const& i: X) if (is_prime(i)){
        f_actual << "{";
        f_actual << "'a': " << i.a << ",";
        f_actual << "'b': " << i.b;
        f_actual << "};";
    }
    f_actual.close();

    auto start = MPI_Wtime();
    mpi_extract_if(MPI_COMM_WORLD, X, Y, is_prime);
    MPI_Barrier(MPI_COMM_WORLD);
    auto end = MPI_Wtime();

    f_mpi.open(fn_mpi.str());
    
    for (auto const& i: Y) if (is_prime(i)){
        f_mpi << "{";
        f_mpi << "'a': " << i.a << ",";
        f_mpi << "'b': " << i.b;
        f_mpi << "};";
    }
    f_mpi.close();

    if (rank == 0) std::cout << (end - start) << std::endl;

    return MPI_Finalize();
} // main
